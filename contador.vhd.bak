library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity contador is
	generic (D : natural := 2; 	U : natural := 3);
	port (
		clk : in std_logic;
		clk_out	: out std_logic;
		rst: in std_logic;
		bcd_U : out std_logic_vector(3 downto 0);
		bcd_D : out std_logic_vector(3 downto 0)
	);
end entity;
architecture arch1 of contador is

--	component div_clk is
--		generic (fclk2 : natural := 50);       -- frequecia para simulacao
--		port (
--			clk : in std_logic;
--			rst : in std_LOGIC;
--			clk_out : out std_logic
--		);
--	end component;
signal clk_out_tmp : std_logic := '1';
 
begin

 --instanciacao dos componentes
--	U1: div_clk
--		generic map (fclk2 => 60)       -- frequecia para simulacao
--		port map (
--			clk => clk,
--			rst => rst,
--			clk_out => clk_out
--		);

P1:	PROCESS(clk, rst)
		VARIABLE tempU: natural RANGE 0 TO 10;
		VARIABLE tempD: natural range 0 to D+1;
		-- 0 a 99
	BEGIN
	if(rst = '0') then
		tempD := 0;
		tempU := 0;
	elsif (rising_edge(clk)) THEN
		if(tempD = D and tempU = U) then
			tempD := 0;
			tempU := 0;
			clk_out <= '1';
		else
			tempU := tempU + 1;
			if (tempU > 9) then
				tempU := 0;
				tempD := tempD + 1;
				clk_out <= '0';
			end if;
		end if;
	END IF;
	bcd_D <= std_logic_vector(to_unsigned(tempD,4));
	bcd_U <= std_logic_vector(to_unsigned(tempU,4));
--	clk_out <= clk_out_tmp;
	end process;
	



end architecture;